##########################
Including jQuery

Babel
Babel is a next generation JavaScript compiler:

	import $ from "jquery"; 

Browserify/Webpack
In the script, including jQuery will usually look like this:

	var $ = require("jquery");

#############################

window.jQuery = window.$ = $; // Exposes jQuery to the global object

 the $ in the code above is just a shorter, more convenient name for the jQuery function

WHEN YOU CALL THE $() FUNCTION AND PASS A SELECTOR TO IT, YOU CREATE A NEW JQUERY OBJECT. Of course, in JavaScript, functions are objects too, so that means that $ (and jQuery, of course) has properties and methods, too.

################################ 

Events and Event Delegation

all of the shorthand methods make use of jQuery's .on() method. You can use
the .on() method in your own code

When you use the .on() method, you pass the native event name as the first
argument, and then the handler function as the second argument: 

 "bound" an event handler to an element, you can trigger that event handler
using jQuery as well.

 "bound" an event handler to an element, you can trigger that event handler
using jQuery as well.

$( 'li' ).trigger( 'click' );
$( 'li' ).click();

When you .trigger() an event, you only trigger event handlers that were bound
with JavaScript — you don't trigger the default behavior of the event.

 .off() method. This will remove any event handlers that were bound to the
specified event: 

$( 'li' ).off( 'click' );

 benefit of using .on() is the ability to bind to multiple events at once.

Passing named functions as event handlers: create a function ahead of time and
store it in a variable, then pass that variable as the event handler. 

var handleClick = function() {
  console.log( 'something was clicked' );
};

$( 'li' ).on( 'click', handleClick );

The event object!!!!

Whenever an event is triggered, the event handler function receives one
argument, an event object that is normalized across browsers. 

Inside the event handler

When you specify a function to be used as an event handler, that function gets
access to the raw DOM element that initiated the event as this. If you want to
use jQuery to manipulate the element, you will need to pass it to $().

Preventing the default action

 having the event handler return false stops the propagation of the event. The
right way to prevent the default behavior of an event is to call the
.preventDefault() method of the event object:
$( 'a' ).on( 'click', function( event ) {
  // Prevent the default action.
  event.preventDefault();
  // Log stuff.
  console.log( 'I was just clicked!' );
});

This will allow the event to "bubble,":

 event bubbling — the event is triggered on the element on which the user
clicked, and — unless you call .stopPropagation() on the event object — the
event is then triggered all the way up the DOM. 

Event delegation

The bubbling behavior of events allows us to do "event delegation" — binding
handlers to high-level elements, and then detecting which low-level element
initiated the event. For example, we could bind an event to an unordered list,
and then determine which element initiated the event: 

$( '#my-unordered-list' ).on( 'click', function( event ) {
  console.log( event.target ); // logs the element that initiated the event
});

################################ 
AJAX

 means of loading data from a server without requiring a page reload. It uses
a browser's built-in XMLHttpRequest (XHR) functionality to make a request to
the server and then handle the data that the server returns.

jQuery provides the $.ajax method

$.ajax()

- we can pass it a configuration object as its sole argument

$.ajax({
  url: '/data/people.json',
  dataType: 'json',
  success: function( resp ) {
    $( '#target').html( resp.people[0].name );
  },
  error: function( req, status, err ) {
    console.log( 'something went wrong', status, err );
  }
});


- we can pass it a URL and an optional configuration object

useful if you want to use the default configuration for $.ajax(), or if you
want to use the same configuration for several URLs. 

$.ajax( '/data/people.json', {
  type: 'GET',
  dataType: 'json',
  success: function( resp ) {
    console.log( resp.people );
  },
  error: function( req, status, err ) {
    console.log( 'something went wrong', status, err );
  }
});

A is for asynchronous

AJAX requests run asynchronously — that means that the $.ajax method returns
before the request is finished, and therefore before the success callback
runs. That means that this function's return statement runs before the request
is complete. This means the getSomeData function below will return data before
it is defined, causing the code to throw an error. 

X is for JSON

 Back then, data sent by a server tended to be formatted as XML, but these
days, most modern applications use JSON as the format for data from the
server.

JSON is a string representation of data; it looks a whole lot like a normal
JavaScript object, but it can only be used to represent a subset of the data
that a normal JavaScript object can represent.

all property names are quoted: 

JSON is a string representation of an object — the string must be parsed into
an actual JavaScript object before working with it

 jQuery takes care of this task for you

If you need to create a JSON string from a JavaScript object, or if you need
to parse a JSON string outside of jQuery, modern browsers provide the
JSON.stringify() and JSON.parse() methods. This functionality can be added to
older browsers using the json2.js library. jQuery also provides the
jQuery.parseJSON method, which provides the same functionality as JSON.parse()
across all browsers. However, jQuery does not provide a method that
corresponds to JSON.stringify(). 

Convenience methods

 if we don't care about error handling — jQuery provides several "convenience
methods" that let us use an abbreviated syntax. 

$.get(

Sending data & working with forms

We can send data with our request by setting the data property on our
configuration object, or by passing an object as the second argument to one of
the convenience methods.

For a GET request, this data will be appended to the URL as a query string;
for a POST request, it will be sent as form data. jQuery provides the helpful
.serialize() method for taking form input and converting it to a query string
format (field1name=field1value&field2name=field2value...): 

$( 'form' ).submit(function( event ) {
  event.preventDefault();

  var form = $( this );

  $.ajax({
    type: 'POST',
    url: '/data/save',
    data: form.serialize(),
    dataType: 'json',
    success: function( resp ) {
      console.log( resp );
    }
  });
});


jqXHR

$.ajax() (and related convenience methods) returns a jqXHR object — a jQuery
XML HTTP Request

We can make a request using $.ajax(), and then capture the returned jqXHR
object in a variable.


var req = $.ajax({
  url: '/data/people.json',
  dataType: 'json'
});


.then() method of the jqXHR object 

The .then() method takes one or two functions as its arguments. The first
function will be be called if the request succeeds; the second will be called
if the request fails. 

var success = function( resp ) {
  $( '#target' ).append(
    '<p>people: ' + resp.people.length + '</p>'
  );
  console.log( resp.people );
};

var err = function( req, status, err ) {
  $( '#target' ).append( '<p>something went wrong</p>' );
};

req.then( success, err );
req.then(function() {
  $( '#target' ).append( '<p>it worked</p>' );
});

We can call .then() on a request as many times as we'd like; it's a first-in,
first-out queue.

If we don't want to attach success and error callbacks at the same time, we
can use the .done() and .fail() methods of the request object. 


